// Code generated by protoc-gen-go. DO NOT EDIT.
// source: operators.proto

package parser_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operator struct {
	// Information about dectection of SQLi and XSS.
	MatchMessage string `protobuf:"bytes,1,opt,name=match_message,json=matchMessage,proto3" json:"match_message,omitempty"`
	// Indicates whether use "!" in operator.
	Negation bool `protobuf:"varint,2,opt,name=negation,proto3" json:"negation,omitempty"`
	// Operator's name.
	Op string `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
	// Indicates whether contain macro expansion in operator.
	// More information about macro: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-%28v2.x%29#macro-expansion
	CouldContainsMacro bool `protobuf:"varint,4,opt,name=could_contains_macro,json=couldContainsMacro,proto3" json:"could_contains_macro,omitempty"`
	// Operator's parameter.
	Param                string   `protobuf:"bytes,5,opt,name=param,proto3" json:"param,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Operator) Reset()         { *m = Operator{} }
func (m *Operator) String() string { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()    {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_92fde9839a62b841, []int{0}
}

func (m *Operator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operator.Unmarshal(m, b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return xxx_messageInfo_Operator.Size(m)
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

func (m *Operator) GetMatchMessage() string {
	if m != nil {
		return m.MatchMessage
	}
	return ""
}

func (m *Operator) GetNegation() bool {
	if m != nil {
		return m.Negation
	}
	return false
}

func (m *Operator) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Operator) GetCouldContainsMacro() bool {
	if m != nil {
		return m.CouldContainsMacro
	}
	return false
}

func (m *Operator) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func init() {
	proto.RegisterType((*Operator)(nil), "parser.proto.Operator")
}

func init() { proto.RegisterFile("operators.proto", fileDescriptor_92fde9839a62b841) }

var fileDescriptor_92fde9839a62b841 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8e, 0x41, 0x0a, 0xc2, 0x30,
	0x10, 0x45, 0x49, 0xb5, 0x52, 0x43, 0x55, 0x18, 0xba, 0x08, 0xae, 0x8a, 0x6e, 0xba, 0x12, 0xc1,
	0x23, 0xb8, 0x2e, 0x42, 0x2f, 0x50, 0xc6, 0x18, 0x6a, 0xc1, 0x64, 0xc2, 0x24, 0x9e, 0xc8, 0x8b,
	0x8a, 0x69, 0x71, 0xf9, 0xfe, 0x9b, 0x3f, 0x7c, 0xb9, 0x23, 0x6f, 0x18, 0x23, 0x71, 0x38, 0x79,
	0xa6, 0x48, 0x50, 0x7a, 0xe4, 0x60, 0x78, 0xa2, 0xc3, 0x47, 0xc8, 0xe2, 0x36, 0x5f, 0xc0, 0x51,
	0x6e, 0x2c, 0x46, 0xfd, 0xec, 0xad, 0x09, 0x01, 0x07, 0xa3, 0x44, 0x2d, 0x9a, 0x75, 0x57, 0xa6,
	0xb0, 0x9d, 0x32, 0xd8, 0xcb, 0xc2, 0x99, 0x01, 0xe3, 0x48, 0x4e, 0x65, 0xb5, 0x68, 0x8a, 0xee,
	0xcf, 0xb0, 0x95, 0x19, 0x79, 0xb5, 0x48, 0xad, 0x8c, 0x3c, 0x9c, 0x65, 0xa5, 0xe9, 0xfd, 0x7a,
	0xf4, 0x9a, 0x5c, 0xc4, 0xd1, 0x85, 0xde, 0xa2, 0x66, 0x52, 0xcb, 0xd4, 0x83, 0xe4, 0xae, 0xb3,
	0x6a, 0x7f, 0x06, 0x2a, 0x99, 0x7b, 0x64, 0xb4, 0x2a, 0x4f, 0x4f, 0x26, 0xb8, 0xaf, 0xd2, 0xd8,
	0xcb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x4c, 0x9f, 0xd4, 0xcd, 0x00, 0x00, 0x00,
}
